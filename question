5 steps for solving a technical question
1-Ask questions: for example; how many customers? one million. This will change what you need to choose for your algorithm
2-design an algorithm:  when designing an algorithm pay attention to the following:
what are space and time complexity
what happens if there is a lot of data
Does the design cause an issue (did the impact time for insert, find or delete got impacted
did you make right trade offs  for a specific issue?
If they give you specific data (e.g., mentioned that data is ages, or in sorted order), have you laveraged that information? Usually there is a reason for that question
3-pseudocode (tell interviewer that you will write real code later): Helps to outline thoughts clearly andreduce the mistakes.  Just write in plain english or use charts.
4-write code at moderate paste:  Name your variables correctly and don't crowd your code. Start at the corner of the board. And go at a modereate paste.
5-test your code carefully: 
extreme case: 0, negative, null, maximum, minimums 
User error: What happens if you user passes a null or negattive value
General cases: Test the normal case.
if the code is complicated, consider testing while writing the code. be careful to find out why the error is happening, you don’t want to be seen as a random fixer. for example function returns true instead of false for a particular value, and so just flips the return value and tests to see if the function works.
When you see a problem with your code deeply think about why code failed before fixing the mistake. 
GOOD CODE:
Broadly speaking, good code has the following properties:
• Correct: The code should operate correctly on all expected and unexpected inputs.
• Efficient: The code should operate as efficiently as possible in terms of both time
and space. This "efficiency" includes both the asymptotic (big-0) efficiency and the
practical, real-life efficiency. That is, a constant factor might get dropped when you
compute the big-O time, but in real life, it can very much matter.
• Simple: If you can do something in 10 lines instead of 100, you should. Code should
be as quick as possible for a developer to write.
• Readable: A different developer should be able to read your code and understand
what it does and how it does it. Readable code has comments where necessary, but
it implements things in an easily understandable way. That means that your fancy
code that does a bunch of complex bit shifting is not necessarily good code.
• Maintainable: Code should be reasonably adaptable to changes during the life
cycle of a product and should be easy to maintain by other developers as well as the
initial developer. 
